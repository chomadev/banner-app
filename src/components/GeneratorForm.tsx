/**
 * This code was generated by v0 by Vercel.
 * @see https://v0.dev/t/dHr1n6lqXh3
 */
import { Label } from "@/components/ui/label"
import { Input } from "@/components/ui/input"
import Banner from "./Banner"
import { useState } from "react";
import TechnologyCheckbox from "./TechnologyCheckbox";

export interface Colors {
  color1: string;
  color2: string;
  gradientAngle: number;
  iconColor1: string;
  iconColor2: string;
  textColor: string;
}

export function GeneratorForm() {
  const [colors, setColors] = useState<Colors>({
    color1: '#D8F5E9',
    color2: '#B97676',
    gradientAngle: 0,
    iconColor1: "blue",
    iconColor2: "gray",
    textColor: "black",
  });
  const [technologies, setTechnologies] = useState<{
    React: boolean;
    'Node.js': boolean;
    HTML5: boolean;
    CSS3: boolean;
    JavaScript: boolean;
    Angular: boolean;
    Microsoft: boolean;
    Android: boolean;
    AppStoreIos: boolean;
    Aws: boolean;
    DotNet: boolean;
    Java: boolean;
    MicrosoftSQLServer: boolean;
    AzureDevOps: boolean;
  }>({
    React: false,
    'Node.js': false,
    HTML5: false,
    CSS3: false,
    JavaScript: false,
    Angular: false,
    Microsoft: false,
    Android: false,
    AppStoreIos: false,
    Aws: false,
    DotNet: false,
    Java: false,
    MicrosoftSQLServer: false,
    AzureDevOps: false
  });
  const [fullName, setFullName] = useState('');
  const [role, setRole] = useState('');

  const handleColorChange = (color: any, type: string) => {
    setColors((prevColors) => ({ ...prevColors, [type]: color }));
  };

  const handleAngleChange = (angle: number, type: string) => {
    setColors((prevColors) => ({ ...prevColors, [type]: angle }));
  };

  const handleTechnologyChange = (technology: string, isChecked: boolean) => {
    setTechnologies((prevTechnologies) => ({ ...prevTechnologies, [technology]: isChecked }));
  };

  return (<>
    <div className="mt-12 flex flex-col lg:flex-row gap-6">
      <div className="w-full lg:w-1/2 max-w-[400px]">
        <h2 className="text-3xl font-bold mb-4">LinkedIn Banner Creator</h2>
        <form className="space-y-4">
          <div className="space-y-2">
            <Label htmlFor="name">Name</Label>
            <Input id="name" placeholder="Enter your name"
              value={fullName} onChange={(e) => setFullName(e.target.value)} />
          </div>
          <div className="space-y-2">
            <Label htmlFor="job-title">Job Title</Label>
            <Input
              id="job-title"
              placeholder="Enter your job title"
              value={role}
              onChange={(e) => setRole(e.target.value)} />
          </div>
          <div className="space-y-2">
            <Label htmlFor="text-color">Background Color Initial</Label>
            <Input
              id="job-title"
              type="color"
              value={colors.color1}
              onChange={(e) => handleColorChange(e.target.value, 'color1')} />
          </div>
          <div className="space-y-2">
            <Label htmlFor="text-color">Background Color Finish</Label>
            <Input
              id="job-title"
              type="color"
              value={colors.color2}
              onChange={(e) => handleColorChange(e.target.value, 'color2')} />
          </div>
          <div className="space-y-2">
            <Label htmlFor="gradient-angle">Gradient angle</Label>
            <Input
              id="gradient-angle"
              type='number'
              defaultValue={0}
              min={0}
              max={360}
              step={1}
              onChange={(e) => {
                if (e.target.value) {
                  handleAngleChange(parseInt(e.target.value), 'gradientAngle')
                }
              }} />
          </div>

          <div className="space-y-2">
            <Label htmlFor="text-color">Icon Color</Label>
            <Input
              id="job-title"
              type="color"
              value={colors.iconColor1}
              onChange={(e) => handleColorChange(e.target.value, 'iconColor1')} />
          </div>

          <div className="space-y-2">
            <Label htmlFor="text-color">Icon Color Shadow</Label>
            <Input
              id="job-title"
              type="color"
              value={colors.iconColor2}
              onChange={(e) => handleColorChange(e.target.value, 'iconColor2')} />
          </div>

          <div className="space-y-2">
            <Label htmlFor="text-color">Text Color</Label>
            <Input
              id="job-title"
              type="color"
              value={colors.textColor}
              onChange={(e) => handleColorChange(e.target.value, 'textColor')} />
          </div>
          <div className="space-y-2">
            <Label htmlFor="skills">Skills</Label>
            <div className="flex flex-col">
              {Object.keys(technologies).map((tech) => (
                <TechnologyCheckbox key={tech} technology={tech} onChange={handleTechnologyChange} />
              ))}
            </div>
          </div>
        </form>
      </div>
      <Banner colors={colors}
        technologies={technologies}
        fullName={fullName}
        role={role} />

    </div>
    <footer className="w-full py-6 px-4 bg-white border-t border-gray-200 dark:bg-gray-900 dark:border-gray-800 print:hidden">
      <div className="container mx-auto text-center">
        <p className="text-gray-600 dark:text-gray-400">Â© {new Date().getUTCFullYear()} choma.dev - All rights reserved.</p>
      </div>
    </footer>
  </>
  )
}
